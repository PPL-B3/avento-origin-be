name: CI/CD for NestJS using Docker Hub

on:
  push:
    branches:
      - main
      - staging
      - dev
  pull_request:
    branches:
      - main
      - staging
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 3. Install pnpm globally
      - name: Install pnpm
        run: npm install -g pnpm

      # 2. Set up Node.js and cache pnpm
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      # 4. Install project dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 5. Run linting
    #   - name: Lint the code
    #     run: pnpm lint

      # 6. Run tests with coverage and generate test reports
      - name: Run tests with coverage
        run: pnpm test --coverage --ci

      # 7. Upload coverage reports artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

      # 8. Upload test reports artifact (assuming your tests output a file like test-report.xml)
      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.xml

      # 9. Build Docker image using Docker Hub naming
      - name: Build Docker image
        run: |
          docker build --build-arg POSTGRES_USER=${{ secrets.DB_USER }} \
          --build-arg POSTGRES_PASSWORD=${{ secrets.DB_PASS }} \ 
          --build-arg POSTGRES_DB=${{ secrets.DB_DB }} \
          --build-arg POSTGRES_HOST=${{ secrets.DB_HOST }} \
          --build-arg POSTGRES_PORT=${{ secrets.DB_PORT }} \
          --build-arg DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_DB }}?schema=public \
          -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }} .

      # 10. Log in to Docker Hub
      - name: Docker Hub Login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login docker.io -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      # 11. Push Docker image to Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}

      # 12. Run SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 13. Set deployment environment variables based on branch
      - name: Set deployment environment variables
        id: deploy-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "REMOTE_SERVER=${{ secrets.PROD_SERVER }}" >> $GITHUB_ENV
            echo "REMOTE_USER=${{ secrets.PROD_USER }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "REMOTE_SERVER=${{ secrets.STAGING_SERVER }}" >> $GITHUB_ENV
            echo "REMOTE_USER=${{ secrets.STAGING_USER }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/dev" ]; then
            echo "REMOTE_SERVER=${{ secrets.DEV_SERVER }}" >> $GITHUB_ENV
            echo "REMOTE_USER=${{ secrets.DEV_USER }}" >> $GITHUB_ENV
          fi

      # 14. Deploy to DigitalOcean VPS using SSH (with password authentication)
      - name: Deploy to DigitalOcean VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ env.REMOTE_SERVER }}
          username: ${{ env.REMOTE_USER }}
          password: ${{ secrets.DIGITALOCEAN_SSH_PASSWORD }}
          script: |
            # Log in to Docker Hub on the remote server
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            # Pull the new image
            docker pull docker.io/${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}
            # Stop and remove the existing container (if any)
            docker stop ${{ secrets.IMAGE_NAME }} || true
            docker rm ${{ secrets.IMAGE_NAME }} || true
            # Run the new container (adjust port mappings as needed)
            docker run -d --name ${{ secrets.IMAGE_NAME }} -p 3000:3000 docker.io/${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}
