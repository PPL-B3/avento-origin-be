name: CI/CD for NestJS using Docker Hub

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

    #   - name: Lint the code
    #     run: pnpm lint

      - name: Generate Prisma Client
        run: pnpx prisma generate

      - name: Apply Migrations
        run: pnpx prisma migrate deploy

      - name: Run tests with coverage
        run: pnpm test --coverage --ci

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_CSUI }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }} .

      - name: Docker Hub Login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login docker.io -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}

      - name: Set deployment environment variables
        id: deploy-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "REMOTE_SERVER=${{ secrets.PROD_SERVER }}" >> $GITHUB_ENV
            echo "REMOTE_USER=${{ secrets.PROD_USER }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "REMOTE_SERVER=${{ secrets.STAGING_SERVER }}" >> $GITHUB_ENV
            echo "REMOTE_USER=${{ secrets.STAGING_USER }}" >> $GITHUB_ENV
          fi

      - name: Deploy to DigitalOcean VPS
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ env.REMOTE_SERVER }}
          username: ${{ env.REMOTE_USER }}
          password: ${{ secrets.DIGITALOCEAN_SSH_PASSWORD }}
          script: |
            # Log in to Docker Hub on the remote server
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            # Pull the new image
            docker pull docker.io/${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}
            # Stop and remove the existing container (if any)
            docker stop ${{ secrets.IMAGE_NAME }}_container || true
            docker rm ${{ secrets.IMAGE_NAME }}_container || true
            # Run the new container (adjust port mappings as needed)
            docker run -e POSTGRES_USER=${{ secrets.DB_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.DB_PASS }} \
            -e POSTGRES_DB=${{ secrets.DB_DB }} \
            -e POSTGRES_HOST=${{ secrets.DB_HOST }} \
            -e POSTGRES_PORT=${{ secrets.DB_PORT }} \
            -e DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_DB }}?schema=public \
            -d --network=host --name ${{ secrets.IMAGE_NAME }}_container -p 4000:4000 docker.io/${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}
